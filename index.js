require('dotenv').config();

const { Telegraf } = require('telegraf');
const fs = require('fs');
const path = require('path');
const os = require('os');
const http = require('http');
const ytdlp = require('yt-dlp-exec');

// ================= URL helpers =================

// Instagram
function isInstagramReelUrl(u) {
  try {
    const parsed = new URL(u);
    return (
      /(^|\.)instagram\.com$/i.test(parsed.hostname) &&
      /^\/reels?\//i.test(parsed.pathname)
    );
  } catch {
    return false;
  }
}
function normalizeReelUrl(u) {
  const parsed = new URL(u);
  const pathname = parsed.pathname.endsWith('/')
    ? parsed.pathname
    : parsed.pathname + '/';
  // –æ–±—Ä–µ–∑–∞–µ–º query/fragment
  return `https://www.instagram.com${pathname}`;
}

// TikTok
function isTikTokUrl(u) {
  try {
    const p = new URL(u);
    // –¥–æ–º–µ–Ω—ã —Ç–∏–∫—Ç–æ–∫–∞ (–≤–∫–ª—é—á–∞—è –º–æ–±–∏–ª—å–Ω—ã–π –∏ –∫–æ—Ä–æ—Ç–∫–∏–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã)
    const isHost =
      /(^|\.)tiktok\.com$/i.test(p.hostname) ||
      /^vm\.tiktok\.com$/i.test(p.hostname) ||
      /^vt\.tiktok\.com$/i.test(p.hostname) ||
      /^m\.tiktok\.com$/i.test(p.hostname);
    if (!isHost) return false;

    // –µ—Å–ª–∏ –∫–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞ —Ç–∏–ø–∞ vm.tiktok.com/XXXX ‚Äî —Ç–æ–∂–µ –æ–∫ (yt-dlp —Å–∞–º —Ä–∞–∑—Ä—É–ª–∏—Ç)
    if (/^vm\.tiktok\.com$|^vt\.tiktok\.com$/i.test(p.hostname)) return true;

    // –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç: /@username/video/123456789...
    if (/^\/@[^/]+\/video\/\d+/i.test(p.pathname)) return true;

    // –∏–Ω–æ–≥–¥–∞ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è /t/‚Ä¶ —Å —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–º
    if (/^\/t\//i.test(p.pathname)) return true;

    // fallback: –ª—é–±—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ tiktok —Å—á–∏—Ç–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏
    return true;
  } catch {
    return false;
  }
}
function normalizeTikTokUrl(u) {
  try {
    const p = new URL(u);
    // –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Å—ã–ª–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å ‚Äî –æ–Ω–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç—è—Ç—Å—è
    if (/^vm\.tiktok\.com$|^vt\.tiktok\.com$/i.test(p.hostname)) return u;

    // –∫–∞–Ω–æ–Ω–∏–∑–∏—Ä—É–µ–º –±–µ–∑ query/fragment
    if (/^\/@[^/]+\/video\/\d+/.test(p.pathname)) {
      const withoutTrailing = p.pathname.endsWith('/') ? p.pathname : p.pathname + '/';
      return `https://www.tiktok.com${withoutTrailing}`;
    }
    // –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—É—Ç–∏ —Ç–æ–∂–µ –º–æ–∂–Ω–æ –æ–±—Ä–µ–∑–∞—Ç—å –¥–æ –±–µ–∑ query ‚Äî yt-dlp –æ–±—ã—á–Ω–æ —Å–ø—Ä–∞–≤–∏—Ç—Å—è
    p.search = '';
    p.hash = '';
    return p.toString();
  } catch {
    return u;
  }
}

// –°–æ–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ entities
function extractUrls(ctx) {
  const urls = new Set();
  const text = ctx.message?.text || ctx.message?.caption || '';

  const raw = text.match(/https?:\/\/\S+/g);
  if (raw) raw.forEach((u) => urls.add(u));

  const entities = ctx.message?.entities || ctx.message?.caption_entities || [];
  for (const e of entities) {
    if (e.type === 'text_link' && e.url) urls.add(e.url);
    if (e.type === 'url') {
      const part = text.slice(e.offset, e.offset + e.length);
      if (part) urls.add(part);
    }
  }
  return Array.from(urls);
}

// ================= Downloader =================

async function downloadWithYtDlp(url) {
  if (!url) throw new Error('Empty URL passed to downloader');

  const tmpDir = fs.mkdtempSync(path.join(os.tmpdir(), 'video-'));
  const outTpl = path.join(tmpDir, 'video.%(ext)s');

  // –í–∞–∂–Ω–æ: –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ–ª–∞–≥–∏ (-S) —á–µ—Ä–µ–∑ —Ç—Ä–µ—Ç–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–æ–º
  await ytdlp(
    url,
    {
      output: outTpl,
      noPlaylist: true,
      // –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–º–µ–Ω—å—à–∞–π –ª–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä '<45M' –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–∞ Telegram)
      format: 'mp4[filesize<1000M]/mp4/best',
    },
    ['-S', 'res,ext:mp4:m4a']
  );

  const files = fs.readdirSync(tmpDir).map((f) => path.join(tmpDir, f));
  console.log(files[0]);
  const video = files.find((f) => /\.(mp4|m4v|mov)$/i.test(f));
  if (!video) throw new Error('–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏');
  return video; // –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
}

// ================= Bot =================

const token = process.env.BOT_TOKEN;
if (!token) {
  console.error('‚ùå BOT_TOKEN check the .env');
  process.exit(1);
}

const bot = new Telegraf(token);

bot.use(async (ctx, next) => {
  console.log('‚¨ÖÔ∏è  Update:', {
    from: ctx.from?.username || ctx.from?.id,
    type: ctx.updateType,
    text: ctx.message?.text,
  });
  await next();
});

bot.start((ctx) =>
  ctx.reply('–Ø –∂–∏–≤–æ–π, –æ—Ç–æ—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ Instagram Reels –∏–ª–∏ TikTok üé¨')
);

bot.help((ctx) =>
  ctx.reply('–ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Instagram Reels –∏–ª–∏ TikTok ‚Äî —è —Å–∫–∞—á–∞—é –∏ –ø—Ä–∏—à–ª—é –≤–∏–¥–µ–æ.')
);

bot.catch((err, ctx) => {
  console.error(`‚ö†Ô∏è Bot error for update ${ctx.update?.update_id}:`, err);
});

// –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
bot.on('message', async (ctx) => {
  let filePath;
  try {
    const urls = extractUrls(ctx);

    // –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Å–Ω–∞—á–∞–ª–∞ IG Reels, –ø–æ—Ç–æ–º TikTok
    const ig = urls.find(isInstagramReelUrl);
    const tt = ig ? null : urls.find(isTikTokUrl);

    if (!ig && !tt) {
      return ctx.reply(`–¢—ã –Ω–∞–ø–∏—Å–∞–ª: ${ctx.message?.text || '—á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ üòÖ'}`);
    }

    const targetUrl = ig ? normalizeReelUrl(ig) : normalizeTikTokUrl(tt);
    const label = ig ? 'Instagram Reels' : 'TikTok';

    const notice = await ctx.reply(`–ù–∞—à—ë–ª ${label}. –°–∫–∞—á–∏–≤–∞—é‚Ä¶ ‚è¨`);

    filePath = await downloadWithYtDlp(targetUrl);

    // console.log(ctx);

     const caption =
      `üë§ –ê–≤—Ç–æ—Ä: @${ctx.from?.username || ctx.from?.id}\n` +
      `üîó <a href="${ctx.message?.text}">–û—Ä–∏–≥–∏–Ω–∞–ª</a>`;

    await ctx.replyWithVideo(
      { source: fs.createReadStream(filePath) },
      { caption: caption, supports_streaming: true, parse_mode: 'HTML' }
    );

    try {
      await ctx.telegram.editMessageText(
        notice.chat.id,
        notice.message_id,
        undefined,
        '–ì–æ—Ç–æ–≤–æ ‚úÖ'
      );
      await ctx.deleteMessage(ctx.message.message_id);
    } catch {}
  } catch (err) {
    console.error('Download/send error:', err);
    await ctx.reply(
      '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —ç—Ç–æ –≤–∏–¥–µ–æ üòï\n' +
        '–£–±–µ–¥–∏—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –ø—É–±–ª–∏—á–Ω–∞—è –∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞. ' +
        '–ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π ‚Äî —Å–∫–∞—á–∞—Ç—å –Ω–µ–ª—å–∑—è.'
    );
  } finally {
    if (filePath) {
      try {
        fs.unlinkSync(filePath);
        fs.rmdirSync(path.dirname(filePath));
      } catch (e) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:', e.message);
      }
    }
  }
});

// ================= Launch & graceful shutdown =================

bot.launch().then(() => console.log('‚úÖ Bot launched'));

const PORT = process.env.PORT || 8080;
const server = http
  .createServer((_, res) => {
    res.writeHead(200, { 'Content-Type': 'text/plain' });
    res.end('ok');
  })
  .listen(PORT, () => console.log(`ü©∫ Healthcheck on :${PORT}`));

process.once('SIGINT', () => {
  server.close(() => console.log('HTTP server closed'));
  bot.stop('SIGINT');
});
process.once('SIGTERM', () => {
  server.close(() => console.log('HTTP server closed'));
  bot.stop('SIGTERM');
});
